% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do-html-tables.R
\name{do_html_table}
\alias{do_html_table}
\title{Create HTML table}
\usage{
do_html_table(
  d = "",
  n_rows = 1,
  widths = NULL,
  table_caption = NULL,
  style = NULL,
  file = "temp_learn-table.html",
  interactive = interactive()
)
}
\arguments{
\item{d}{Character; Vector of column names, or a data frame.}

\item{n_rows}{Integer; Number of rows, defaults to 1}

\item{widths}{Numeric; Vector of column widths}

\item{table_caption}{Character; Table caption (optional)}

\item{style}{Character; Named vector of CSS styles where the names are the
selectors and the values are the CSS properties.}

\item{file}{Character; Name of the file to write the HTML table to. Defaults
to \code{temp-table.html}}
}
\value{
If run in an interactive R session, the HTML file generated is opened for manual editing. Otherwise, returns the path to the created HTML file.
}
\description{
Creates a complete HTML table skeleton, including the header, body, and
column groups. The table is styled using either the default, or user
provided, CSS. By default, cells are populated with a default
\verb{__PLACEHOLDER__} value. The intention is to provide a template for HTML
table that can be easily edited manually, copied, and pasted into a Learn
document. There is some minimal ability to customize the table style (see
\href{#adding-css-rules}{Adding css rules}). The output is written to an HTML
file, which opens for manual editing. Any default \verb{__PLACEHOLDER__} values
should be replaced manually. This final table can then be copied and pasted
into a Learn page.
}
\details{
While there are several packages that can create HTML tables, the HTML output
is often complex and difficult to customize. This function aims to provide a
simple and straightforward way to create minimal HTML tables, allowing for
easy (but minimal) customization.
\subsection{Adding css rules}{

New style rules can be added by providing a named vector of CSS
declarations. The names are the "selectors", and the values should follow
the usual CSS declaration syntax of \code{property: value}. Selector may include
non-syntactic characters such as spaces or dashes, in which case they must
be enclosed in backticks or quotes. For example, \verb{selector with spaces} or
\verb{.a-class tr > td}, as shown in the examples.

Declarations added to existing selectors are appended to the existing
declarations for those selectors. Original declarations are not removed.
Rules for new selectors are appended to the end of the rules set.
}
}
\examples{
\dontrun{

# Create a blank HTML table skeleton
# with column names and specicified number of rows
do_html_table(c('col_1', 'col_2', 'col_3'), n_rows = 2)

# Create HTML table filled with values from a data frame
do_html_table(BOD)

do_html_table(c('Criteria', 'Description', 'Weight'),
              n_rows = 2)

do_html_table(c('Criteria', 'Description', 'Weight'),
              n_rows = 2,
              table_caption = 'This is my caption')

# Update the table style
new_css <- c(element = 'property: value;',
             .row_highlight = 'background-color: #000000;',
             `.a-class tr > td` = 'property: value;')

do_html_table(c('Criteria', 'Description', 'Weight'),
              nrows = 2,
              style = new_css)
}

}
